constuctor:
	listy(array or listy or iteratorFactory)


listy methods

	.filter(filter) => listy
	.first() => var
	.last() => var
	.map(map) => listy
	.length() => int
	.reduce(reduce,init?,param?) => var
    .every(filter) => boolean
	.some(filter) => boolean
	.sort((compare?,param?) || sortgroup...) => listy
	.slice(int as index, int as count) => listy
	.skip(int as count) => listy
	.take(int as count) => listy
	.groupBy(grouping,param?) => listy
	.unique(distinctSelector,param?) => listy

	.toArray(map?) => array
	.toHash(map for key,map for value) => hash function
	.toLazyHash(map for key,map for value) => hash function
	.toGroupArray(map for key,map? for group items) => array of group
	.toUniqueSet(distinctSelector, map?) => array of group


parameter types

	filter =

		function(item,index){
			//returns boolean on whether to include
		})

		"angular expression" where $item = item selected, $index = current index and root context = item selected
		["angular expression",param] where $item = item selected, $index = current index, $param = param and root context = item selected

	map =

		function(item,index){
			//returns projected value
		})
		"angular expresion" where $item = item selected, $index = current index and root context = item selected
		["angular expression",param] where $item = item selected, $index = current index, $param = param and root context = item selected


	compare =
		"{exp} (desc|asc) (with {comparision expression}?(, {compareString})*" where $item = item selected, $compare = compare operation  and root context = item selected
		function(item,compared){ returns 1 0 or -1 }

		compareItem =
			[function(item,compared),"asc| desc"]
			["{exp} (desc|asc) (with {comparision expression}?(, {compareString})*", param, compareOperationBase] where $item = item selected, $compare = compare operation, $param = param, and root context = item selected
		[{compareItem}*]

    keySelect =
		"{key exp} on (desc|asc)? (with {comparision expression})?" where $item = item selected, $compare = compare operation  and root context = item selected
		function(item){}
		[function(item){},"asc" | "desc"]
		[function(item){},function(item,compare),"asc" | "desc"]
		[function(item){},function(item), function(item,compare),"asc" | "desc"]
        ["{key exp} (desc|asc)? (matching {compare value exp})? (with {comparision expression})?",param,compare]

	groupMap = 
		"angular expression" where $key = group key, $items = group items, $index = current group index and root context = item selected 
		["angular expression",param] where $key = group key, $items = group items, $index = current group index, $param = param and root context = item selected 

	reduce = 
		function(result,current,index)
		[function(result,current,index),param,init]
		"angular expression" where $result = result, $current = current item in array, $index = index and root context = $result
        ["angular expression",init] where

    {key,value}
