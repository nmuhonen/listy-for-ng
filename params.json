{"name":"Listy-for-ng","tagline":"ng service for managing arrays","body":"listy-for-ng\r\n============\r\n\r\nAn angular service for doing stuff with arrays in a chainable lazy evaluated way.\r\n\r\nservice listy(array | listy | listyIteratorFactory) => listy\r\n--------\r\ncreates a new listy object.\r\n\r\n```javascript\r\nangular.module(\"listyMod\",[]);\r\nangular.run([\r\n  \"listy\",\r\n  function(listy){\r\n    var listee = listy([1,2,3,4,5]); // creates a listy from an array\r\n    \r\n    var listee2 = listy(listy.createIterator); // creates a listy from\r\n    \r\n    var listee3 = listy(listee); // pass through -> listee === listee3\r\n  })\r\n]);\r\n```\r\n\r\nmethod forEach(actionFn,param?) => listy\r\n--------\r\niterates through a listy.\r\n\r\n```javascript\r\n//with a closure\r\nvar source = [{val:1},{val:2},{val:3}];\r\n\r\nlisty(source).forEach(function(item,index,ctx){\r\n  if (index > 1){\r\n    return ctx.break;\r\n  }\r\n  item.index = index;\r\n});\r\n\r\nexpect(source).toBe({index:0,val:1},{val:2},{val:3});\r\n\r\n//with an expression using an optional parameter\r\nvar source = [{val:1},{val:2},{val:3}];\r\n\r\nlisty(source).forEach(\"$index > val ? $break : (index = $index)\",{val:1});\r\n\r\nexpect(source).toBe({index:0,val:1},{val:2},{val:3});\r\n```\r\n\r\nmethod count() => number\r\n--------\r\nreturns the number of elements in a listy.\r\n\r\n```javascript\r\nvar source = [{val:1},{val:2},{val:3}];\r\nvar count = listy(source).count();\r\n\r\nexpect(length).toBe(3);\r\n```\r\n\r\nmethod filter(filterOp,param?) => listy\r\n--------\r\nfilters a result set from a listy.\r\n\r\n```javascript\r\n//with a closure\r\nvar source = [{val:1},{val:2},{val:3}];\r\n\r\nvar result = listy(source).filter(function(item,index){\r\n  return index < 1 || item.val === 3\r\n});\r\n\r\nexpect(result()).toEqual([{val:1},{val:3}]);\r\n\r\n//with an expression using an optional parameter\r\nvar source = [{val:1},{val:2},{val:3}];\r\n\r\nvar result = listy(source).filter(\"$index < targetIndex || val === targetVal\",{targetIndex:1,targetVal:3});\r\n});\r\n\r\nexpect(result()).toEqual([{val:1},{val:3}]);\r\n```\r\n\r\nmethod map(mapOp,param?) => listy\r\n--------\r\nmaps a result set from a listy.\r\n\r\n```javascript\r\n//with a closure\r\nvar source = [1,2];\r\n\r\nvar result = listy(source).map(function(item,index){\r\n  return {val:item, index: index};\r\n});\r\n\r\nexpect(result()).toEqual([{val:1,index:0},{val:2,index:1}]);\r\n\r\n//with an expression using an optional parameter\r\nvar source = [1,2];\r\n\r\nfunction getExpr(item,index){\r\n  return index + \":\" + item;\r\n}\r\n\r\nvar result = listy(source).map(\"{item:$item,index:$index,expr:getExpr($item,$index)}\",{getExpr:getExpr});\r\n\r\nexpect(result()).toEqual([{val:1,index:0,expr:\"0:1\"},{val:2,index:1,expr:\"0:2\"}]);\r\n```\r\n\r\nmethod reduce(reduceOp,init?,param?) => var\r\n--------\r\nreduces a result set from a listy.\r\n\r\n```javascript\r\n//with a closure\r\nvar source = [1,2];\r\n\r\nlisty(source).reduce(function(result,item,index){\r\n  return result + item;\r\n},0);\r\n\r\nexpect(source).toEqual(3);\r\n\r\n//with an expression using an optional parameter\r\nvar source = [1,2];\r\n\r\nfunction add(item1,item2){\r\n  return item1 + item2\r\n}\r\n\r\nlisty(source).map(\"add($item,$result)\",0,{add:add});\r\n});\r\n\r\nexpect(source).toEqual(3);\r\n```\r\n\r\nmethod sort(sortExpression,...) => listy\r\n--------\r\nsorts a result set from a listy.\r\n\r\n```javascript\r\nvar source = [\r\n  {state: \"CA\", city: \"Los Angeles\", age:68}, \r\n  {state: \"OR\", city: \"Portland\", age:57}, \r\n  {state: \"CA\", city: \"San Francisco\", age:78}, \r\n  {state: \"CA\", city: \"Los Angeles\", age:31}, \r\n  {state: \"OR\", city: \"Eugene\", age:57}\r\n  {state: \"OR\", city: \"Eugene\", age:56}, \r\n];\r\n\r\nfunction compareState(item,compare){\r\n  return item.state.localeCompare(compare.state);\r\n}\r\n\r\nfunction strCmp(item,compare){\r\n  return item.localeCompare(compare);\r\n}\r\n\r\n//with closures\r\nvar result = listy(source).sort(compareState,\"desc\");\r\n\r\n//with expression\r\nvar result = listy(source).sort(\"state desc\");\r\n\r\n//with complex expression using a custom sorter\r\nvar result = listy(source).sort(\"state desc, city with strCmp, age\",{strCmp: strCmp});\r\n\r\n//with all of the above\r\nvar result = listy(source).sort([compareState,\"desc\"],[\"city with strCmp\",{strCmp: strCmp}],[\"age\"]);\r\n```\r\n\r\nmethod groupBy(key,groupItem?,param?) => listy\r\n--------\r\ngroups a result set from a listy.\r\n\r\n```javascript\r\nvar source = [\r\n  {stateId: 1, state: \"CA\", city: \"Bakersfield\"}, \r\n  {stateId: 2, state: \"OR\", city: \"Portland\"}, \r\n  {stateId: 1, state: \"CA\", city: \"San Francisco\"}, \r\n  {stateId: 1, state: \"CA\", city: \"Los Angeles\"}, \r\n  {stateId: 2, state: \"OR\", city: \"Eugene\"}\r\n  {stateId: 2, state: \"OR\", city: \"St Helens\"}, \r\n];\r\n\r\nfunction expr(item){return item.stateId + \":\" + item.state;}\r\n\r\n//with an expression\r\nvar result = listy(source).groupBy(\"stateId as expr($item)\",\"city\",{expr: expr});\r\n\r\n//with an expression and a grouping closure\r\n\r\nvar result = listy(source).groupBy([\"stateId as expr($item)\",{expr: expr}],function(grp){\r\n  return grp.map(\"city\");\r\n});\r\n\r\nexpect(result(\"{stateKey:key,cities:group()}\")).toEqual([\r\n  {\r\n    stateKey: \"1:CA\",\r\n    cities: [\"Bakersfield\",\"San Francisco\",\"Los Angeles\"]\r\n  },  \r\n  {\r\n    stateKey: \"2:OR\",\r\n    cities: [\"Portland\",\"Eugene\",\"St Helens\"]\r\n  },  \r\n]);\r\n```\r\n\r\nmethod unique(uniqueKey,param?) => listy\r\n--------\r\nfilters to unique values based on key\r\n\r\nmethod uniqueSet(uniqueKey,param?) => listy\r\n--------\r\nfilters to unique values based on key, resulting in the set of keys unless otherwize specified\r\n\r\nmethod every(filter,param?) => boolean\r\n--------\r\nreturns true if all items match the expression or closure predicate\r\n\r\nmethod some(filter,param?) => boolean\r\n--------\r\nreturns true if some of the items match the expression or closure predicate\r\n\r\nmethod toArray(map?,param?) => array\r\n--------\r\nproduces an array from the listy\r\n\r\nmethod toGroupArray(key,groupItem,groupMap,param?) => array\r\n--------\r\nproduces an array of groups, with the children of the groups also an array\r\n\r\nmethod toHash(key,value,param?) => hash function\r\n--------\r\nproduces a hash map for quick lookups based on key value pairs \r\n\r\nmethod first() => var\r\n--------\r\nretrieves the first item in a listy \r\n\r\nmethod last() => var\r\n--------\r\nretrieves the last item in a listy\r\n\r\nmethod let(param) => var\r\n--------\r\nsets the params in a listy to be used with all subsequent expressions\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}